# Default configuration file for the model weighting script.
#
# --- *IMPORTANT* ---
# Please don't change anything here but rather:
# 'cp config_default.ini config.ini' (note that config.ini is the default config name
# model_weighting.py will look for)
# open config.ini and set save_path and plot_path to writable directories as well as
# you should now be able to run 'python model_weighting.py' (without any arguments)
# -------------------

# To create a new section just add at the end
# > [new_section]
# All variables not set in [new_section] will be take from [DEFAULT]
# Run the new section: 'python model_weighting.py new_section'

# You can also create a completely new config, with new [DEFAULT] and run it like:
# 'python model_weighting.py -f config_new.ini' (runs [DEFAULT])
# 'python model_weighting.py section_name -f config_new.ini' (runs [section_name])

# --- *NOTE* ---
# If config_default.ini/[DEFAULT] is updated on the master you will have to merge
# the updates in your config.ini manually after pulling. E.g., by running
# 'meld config_default.ini config.ini'
# --------------


[DEFAULT]
# --- io settings ---

# - need to have the same lenght -
# model input data path(s): string or list of strings
model_path =
# model id(s): string or list of strings {CMIP3, CMIP5, CMIP6}
model_id = CMIP5
# model scenario name(s): string or list of strings
model_scenario = rcp85

# - need to have the same lenght -
# observation input path(s): None or string or list of strings
obs_path =
# observation id(s): None or string or list of strings
obs_id = ERA-Interim
# inclusion of observational uncertainty: string {range, mean, median, center, none}
obs_uncertainty = center

# output data path
save_path = ../data/
# output path for plots
plot_path = ../plots/

# --- core settings ---
# overwrite existing diagnostics: bool
overwrite = False
# percentiles to use for the perfect model test: list of two floats (0, 1)
percentiles = .1, .9
# inside_ratio to use for the perfect model test: None or float (0, 1) or force
# if None: calculate as percentiles[1] - percentiles[0]
# if force: same as None but dynamicaly relaxes the test if it fails
inside_ratio = None
# subset of models to use: list of model identifiers (model_ensemble_id)
subset = None
# include all initial conditions ensemble members: bool
ensembles = True
# use the ensemble members to establish the independence sigma: bool
# can only be True if ensembles is True
ensemble_independence = True
# how to estimate model performance: string {RMSE, <TODO>}
# - RMSE: root mean squared error
performance_metric = RMSE
# how to normalize performance metrics {median, mean, map, None}
# - median: metric / median
# - mean: metric / mean
# - map: map metric to 0-1 [min(metric), max(metric)] -> [0, 1]
# - None: no normalization (not recomended)
performance_normalize = median
# plot some intermediate results (decreases performance): bool
plot = True

# --- sigmas settings ---
# sigma value handling: None or float > 0 or -99
# if None: calculation via perfect model test of ensembles
# if -99: set corresponding weights to 1

# independence: small: ~all models depend on each other; large: ~all models are independent)
sigma_i = None
# performance: smaller is more aggressive
# NOTE: if this is set to -99 the perfect model test will probably not yield
# meaning full results so sigma_i should also be set manually.
sigma_q = None

# --- target settings ---
# variable name: string
target_diagnostic = tas
# aggregation: string {CLIM, STD, TREND}
target_agg = CLIM
# season: string {ANN, JJA, SON, DJF, MAM}
target_season = JJA
# mask ocean: bool
target_masko = True
# target region: string {GLOBAL, valid SREX region, <valid shapefiles/*.txt>}
target_region = EU
# time period: integer yyyy
target_startyear = 2031
target_endyear = 2060
# reference time period: None or integer yyyy
# if not None: change from period_ref to period is the target!
target_startyear_ref = 1951
target_endyear_ref = 2005

# --- predictors settings ---
# - need to have the same lenght -
# same as target but list of strings
predictor_diagnostics = tas, pr, tas
predictor_aggs = TREND, CLIM, STD
predictor_seasons = JJA, DJF, ANN
predictor_masko =  True, True, True
predictor_regions = EU, CEU, NEU
predictor_startyears = 1981, 1981, 1981
predictor_endyears = 2010, 2010, 2010

# --- end of [DEFAULT] ---

[test_default]
# an emty section; this will run the default

[test_no_obs]
obs_id =
# run without observations in a perfect model setting
